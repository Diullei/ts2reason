// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");

var reservedWords = /* :: */[
  "sig",
  /* :: */[
    "module",
    /* :: */[
      "begin",
      /* :: */[
        "end",
        /* :: */[
          "object",
          /* :: */[
            "switch",
            /* :: */[
              "to",
              /* :: */[
                "then",
                /* :: */[
                  "type",
                  /* :: */[
                    "as",
                    /* [] */0
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ]
  ]
];

function range(start, end_) {
  if (start >= end_) {
    return /* [] */0;
  } else {
    return /* :: */[
            start,
            range(start + 1 | 0, end_)
          ];
  }
}

function uniq(x) {
  var uniq_help = function (_l, n) {
    while(true) {
      var l = _l;
      if (l) {
        var t = l[1];
        var h = l[0];
        if (Caml_obj.caml_equal(n, h)) {
          _l = t;
          continue ;
        } else {
          return /* :: */[
                  h,
                  uniq_help(t, n)
                ];
        }
      } else {
        return /* [] */0;
      }
    };
  };
  if (x) {
    var h = x[0];
    return /* :: */[
            h,
            uniq_help(uniq(x[1]), h)
          ];
  } else {
    return /* [] */0;
  }
}

var capitalize = $$String.capitalize;

var lowerFirst = $$String.uncapitalize;

function normalizeName(name) {
  return name.replace((/[\$|\.|\-]/g), "_").replace((/["|']/g), "");
}

function fixIfItsAReservedWork(id) {
  var match = List.length(List.filter((function (kw) {
                return kw === $$String.uncapitalize(id);
              }))(reservedWords));
  if (match !== 0) {
    return "" + (String(id) + "_");
  } else {
    return id;
  }
}

function toUniqueName(candidateName, usedNames) {
  var name = fixIfItsAReservedWork(candidateName);
  var occurrence = List.length(List.filter((function (n) {
                return n === fixIfItsAReservedWork(candidateName);
              }))(usedNames));
  if (occurrence !== 0) {
    return /* tuple */[
            name + String(occurrence),
            /* :: */[
              name,
              usedNames
            ]
          ];
  } else {
    return /* tuple */[
            name,
            /* :: */[
              name,
              usedNames
            ]
          ];
  }
}

function makeIndent(size) {
  if (size !== 0) {
    return $$String.make(size, /* " " */32);
  } else {
    return "";
  }
}

function createNameSpaceName(ns) {
  return normalizeName($$String.concat("_", $$Array.to_list(ns)));
}

exports.reservedWords = reservedWords;
exports.range = range;
exports.uniq = uniq;
exports.capitalize = capitalize;
exports.lowerFirst = lowerFirst;
exports.normalizeName = normalizeName;
exports.fixIfItsAReservedWork = fixIfItsAReservedWork;
exports.toUniqueName = toUniqueName;
exports.makeIndent = makeIndent;
exports.createNameSpaceName = createNameSpaceName;
/* No side effect */
