// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");

function range(start, end_) {
  if (start >= end_) {
    return /* [] */0;
  } else {
    return /* :: */[
            start,
            range(start + 1 | 0, end_)
          ];
  }
}

function repeat(pattern, amount) {
  return List.fold_left((function (prim, prim$1) {
                return prim + prim$1;
              }), pattern, List.map((function (param) {
                    return pattern;
                  }), range(0, amount - 1 | 0)));
}

function make(nl, code, currentIdentation) {
  return /* record */[
          /* nl */nl,
          /* code */code,
          /* currentIdentation */currentIdentation
        ];
}

function write(state, text) {
  return /* record */[
          /* nl */state[/* nl */0],
          /* code */state[/* code */1] + text,
          /* currentIdentation */state[/* currentIdentation */2]
        ];
}

function writeComment(state, text) {
  return write(state, "/* " + (String(text) + " */"));
}

function writeNewLine(state) {
  var state$1 = write(state, "" + (String(state) + ".nl"));
  var match = state$1[/* currentIdentation */2];
  if (match !== 0) {
    return state$1;
  } else {
    return write(state$1, repeat(" ", state$1[/* currentIdentation */2]));
  }
}

function writeRawJs(state, text) {
  return write(state, "[%bs.raw {| " + (String(text) + " |}]"));
}

exports.range = range;
exports.repeat = repeat;
exports.make = make;
exports.write = write;
exports.writeComment = writeComment;
exports.writeNewLine = writeNewLine;
exports.writeRawJs = writeRawJs;
/* No side effect */
