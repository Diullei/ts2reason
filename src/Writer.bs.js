// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var $$String = require("bs-platform/lib/js/string.js");
var Types$Ts2reason00 = require("./Types.bs.js");
var Utils$Ts2reason00 = require("./Utils.bs.js");

function make(nl, code, currentIdentation) {
  return /* record */[
          /* nl */nl,
          /* code */code,
          /* currentIdentation */currentIdentation
        ];
}

function getCode(state) {
  return state[/* code */1];
}

function write(state, text) {
  return /* record */[
          /* nl */state[/* nl */0],
          /* code */state[/* code */1] + text,
          /* currentIdentation */state[/* currentIdentation */2]
        ];
}

function writeComment(state, text) {
  return write(state, "/* " + (String(text) + " */"));
}

function writeNewLine(state) {
  var state$1 = write(state, state[/* nl */0]);
  var match = state$1[/* currentIdentation */2];
  if (match !== 0) {
    return state$1;
  } else {
    return write(state$1, $$String.make(state$1[/* currentIdentation */2], /* " " */32));
  }
}

function writeRawJs(state, text) {
  return write(state, "[%bs.raw {| " + (String(text) + " |}]"));
}

function writeReasonType(state, typ) {
  var match = typ[/* ns */0];
  return write(write(write(write(state, "t_"), Utils$Ts2reason00.normalizeName($$String.concat("_", $$Array.to_list(typ[/* ns */0])))), match.length !== 0 ? "_" : ""), typ[/* id */1]);
}

function writeType(state, tsType, types) {
  var match = Types$Ts2reason00.TsType[/* getText */0](tsType);
  switch (match) {
    case "boolean" : 
        return write(state, "bool");
    case "number" : 
        return write(state, "float");
    case "string" : 
        return write(state, "string");
    default:
      var match$1 = List.filter((function (tp) {
                return tp[/* id */1] === Types$Ts2reason00.TsType[/* getText */0](tsType);
              }))($$Array.to_list(types));
      if (match$1) {
        return writeReasonType(state, match$1[0]);
      } else {
        return write(state, "t_TODO");
      }
  }
}

exports.make = make;
exports.getCode = getCode;
exports.write = write;
exports.writeComment = writeComment;
exports.writeNewLine = writeNewLine;
exports.writeRawJs = writeRawJs;
exports.writeReasonType = writeReasonType;
exports.writeType = writeType;
/* No side effect */
