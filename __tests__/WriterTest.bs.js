// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Os = require("os");
var Jest = require("@glennsl/bs-jest/src/jest.js");
var Writer$Ts2reason00 = require("../src/Writer.bs.js");

function makeFakeTsNode(ns, id, kind) {
  return /* record */[
          /* ns */ns,
          /* id */id,
          /* kind */kind,
          /* node */(
    {
      getType: () => ({ getText: () => "string" }),
      getParameters: () => [
        ({ getType: () => ({ getText: () => "string" }), getName: () => "arg01" }),
        ({ getType: () => ({ getText: () => "number" }), getName: () => "arg02" }),
        ({ getType: () => ({ getText: () => "boolean" }), getName: () => "arg03" }),
      ],
      getReturnType: () => ({ getText: () => "boolean" }),
    }
    )
        ];
}

function makeFakeTsType(_typ) {
  return ( { getText: () => _typ } );
}

function makeFakeTsParDec(_name, _typ) {
  return (
    {
      getName: () => _name,
      getType: () => ({ getText: () => _typ })
    }
  );
}

describe("Writer", (function () {
        Jest.test("write", (function (param) {
                var wState = Writer$Ts2reason00.make(Os.EOL, "", 0);
                return Jest.Expect[/* toEqual */12]("some text !!", Jest.Expect[/* expect */0](Writer$Ts2reason00.getCode(Writer$Ts2reason00.write(Writer$Ts2reason00.write(wState, "some text"), " !!"))));
              }));
        Jest.test("increaseIndent", (function (param) {
                var wState = Writer$Ts2reason00.make(Os.EOL, "", 0);
                return Jest.Expect[/* toEqual */12]("\n    aaa", Jest.Expect[/* expect */0](Writer$Ts2reason00.getCode(Writer$Ts2reason00.write(Writer$Ts2reason00.writeNewLine(Writer$Ts2reason00.increaseIndent(Writer$Ts2reason00.increaseIndent(wState))), "aaa"))));
              }));
        Jest.test("decreaseIndent", (function (param) {
                var wState = Writer$Ts2reason00.make(Os.EOL, "", 0);
                return Jest.Expect[/* toEqual */12]("\n  aaa", Jest.Expect[/* expect */0](Writer$Ts2reason00.getCode(Writer$Ts2reason00.write(Writer$Ts2reason00.writeNewLine(Writer$Ts2reason00.decreaseIndent(Writer$Ts2reason00.increaseIndent(Writer$Ts2reason00.increaseIndent(wState)))), "aaa"))));
              }));
        Jest.test("writeComment", (function (param) {
                var wState = Writer$Ts2reason00.make(Os.EOL, "", 0);
                return Jest.Expect[/* toEqual */12]("/* some comment */", Jest.Expect[/* expect */0](Writer$Ts2reason00.getCode(Writer$Ts2reason00.writeComment(wState, "some comment"))));
              }));
        Jest.test("writeNewLine", (function (param) {
                var wState = Writer$Ts2reason00.make(Os.EOL, "", 0);
                return Jest.Expect[/* toEqual */12](Os.EOL, Jest.Expect[/* expect */0](Writer$Ts2reason00.getCode(Writer$Ts2reason00.writeNewLine(wState))));
              }));
        Jest.test("writeRawJs", (function (param) {
                var wState = Writer$Ts2reason00.make(Os.EOL, "", 0);
                return Jest.Expect[/* toEqual */12]("[%bs.raw {| a b c d e |}]", Jest.Expect[/* expect */0](Writer$Ts2reason00.getCode(Writer$Ts2reason00.writeRawJs(wState, "a b c d e"))));
              }));
        Jest.test("writeReasonType", (function (param) {
                var wState = Writer$Ts2reason00.make(Os.EOL, "", 0);
                return Jest.Expect[/* toEqual */12]("t_aaa_bbb_ccc", Jest.Expect[/* expect */0](Writer$Ts2reason00.getCode(Writer$Ts2reason00.writeReasonType(wState, makeFakeTsNode(/* array */[
                                            "aaa",
                                            "bbb"
                                          ], "ccc", /* ModuleDeclaration */244)))));
              }));
        Jest.testAll("writeType", /* :: */[
              /* tuple */[
                makeFakeTsType("string"),
                /* array */[],
                "string"
              ],
              /* :: */[
                /* tuple */[
                  makeFakeTsType("boolean"),
                  /* array */[],
                  "bool"
                ],
                /* :: */[
                  /* tuple */[
                    makeFakeTsType("number"),
                    /* array */[],
                    "float"
                  ],
                  /* :: */[
                    /* tuple */[
                      makeFakeTsType("xyz"),
                      /* array */[],
                      "t_TODO"
                    ],
                    /* :: */[
                      /* tuple */[
                        makeFakeTsType("MyObj"),
                        /* array */[makeFakeTsNode(/* array */[], "MyObj", /* ModuleDeclaration */244)],
                        "t_MyObj"
                      ],
                      /* [] */0
                    ]
                  ]
                ]
              ]
            ], (function (param) {
                return Jest.Expect[/* toEqual */12](param[2], Jest.Expect[/* expect */0](Writer$Ts2reason00.getCode(Writer$Ts2reason00.writeType(Writer$Ts2reason00.make(Os.EOL, "", 0), param[0], param[1]))));
              }));
        Jest.test("writeIf", (function (param) {
                var wState = Writer$Ts2reason00.make(Os.EOL, "", 0);
                return Jest.Expect[/* toEqual */12]("true expr", Jest.Expect[/* expect */0](Writer$Ts2reason00.getCode(Writer$Ts2reason00.writeIf(wState, true, "true expr", "false expr"))));
              }));
        Jest.testAll("writeParameterName", /* :: */[
              /* tuple */[
                "type",
                true,
                "_type"
              ],
              /* :: */[
                /* tuple */[
                  "type",
                  false,
                  "type_"
                ],
                /* :: */[
                  /* tuple */[
                    "name",
                    false,
                    "name"
                  ],
                  /* [] */0
                ]
              ]
            ], (function (param) {
                return Jest.Expect[/* toEqual */12](param[2], Jest.Expect[/* expect */0](Writer$Ts2reason00.getCode(Writer$Ts2reason00.writeParameterName(Writer$Ts2reason00.make(Os.EOL, "", 0), param[0], param[1]))));
              }));
        Jest.test("writeParameter", (function (param) {
                var wState = Writer$Ts2reason00.make(Os.EOL, "", 0);
                return Jest.Expect[/* toEqual */12]("_param: float", Jest.Expect[/* expect */0](Writer$Ts2reason00.getCode(Writer$Ts2reason00.writeParameter(wState, makeFakeTsParDec("param", "number"), /* array */[]))));
              }));
        Jest.testAll("writeArgumentsToMethodDecl", /* :: */[
              /* tuple */[
                /* array */[],
                "(_inst: t)"
              ],
              /* :: */[
                /* tuple */[
                  /* array */[
                    makeFakeTsParDec("param01", "number"),
                    makeFakeTsParDec("param02", "boolean"),
                    makeFakeTsParDec("param03", "string")
                  ],
                  "(_inst: t, _param01: float, _param02: bool, _param03: string)"
                ],
                /* [] */0
              ]
            ], (function (param) {
                return Jest.Expect[/* toEqual */12](param[1], Jest.Expect[/* expect */0](Writer$Ts2reason00.getCode(Writer$Ts2reason00.writeArgumentsToMethodDecl(Writer$Ts2reason00.make(Os.EOL, "", 0), param[0], /* array */[]))));
              }));
        Jest.testAll("writeArgumentsToFunctionDecl", /* :: */[
              /* tuple */[
                /* array */[],
                "()"
              ],
              /* :: */[
                /* tuple */[
                  /* array */[
                    makeFakeTsParDec("param01", "number"),
                    makeFakeTsParDec("param02", "boolean"),
                    makeFakeTsParDec("param03", "string")
                  ],
                  "(_param01: float, _param02: bool, _param03: string)"
                ],
                /* [] */0
              ]
            ], (function (param) {
                return Jest.Expect[/* toEqual */12](param[1], Jest.Expect[/* expect */0](Writer$Ts2reason00.getCode(Writer$Ts2reason00.writeArgumentsToFunctionDecl(Writer$Ts2reason00.make(Os.EOL, "", 0), param[0], /* array */[]))));
              }));
        Jest.testAll("writeArgumentsToFunctionCall", /* :: */[
              /* tuple */[
                /* array */[],
                "()"
              ],
              /* :: */[
                /* tuple */[
                  /* array */[
                    makeFakeTsParDec("param01", "number"),
                    makeFakeTsParDec("param02", "boolean"),
                    makeFakeTsParDec("param03", "string")
                  ],
                  "(_param01, _param02, _param03)"
                ],
                /* [] */0
              ]
            ], (function (param) {
                return Jest.Expect[/* toEqual */12](param[1], Jest.Expect[/* expect */0](Writer$Ts2reason00.getCode(Writer$Ts2reason00.writeArgumentsToFunctionCall(Writer$Ts2reason00.make(Os.EOL, "", 0), param[0]))));
              }));
        Jest.test("writeModuleNameFrom", (function (param) {
                var wState = Writer$Ts2reason00.make(Os.EOL, "", 0);
                return Jest.Expect[/* toEqual */12]("MyModule", Jest.Expect[/* expect */0](Writer$Ts2reason00.getCode(Writer$Ts2reason00.writeModuleNameFrom(wState, makeFakeTsNode(/* array */[], "'myModule'", /* InterfaceDeclaration */241)))));
              }));
        Jest.test("writeModuleName", (function (param) {
                var wState = Writer$Ts2reason00.make(Os.EOL, "", 0);
                return Jest.Expect[/* toEqual */12]("Ccc", Jest.Expect[/* expect */0](Writer$Ts2reason00.getCode(Writer$Ts2reason00.writeModuleName(wState, /* array */[
                                        "aaa",
                                        "bbb",
                                        "ccc"
                                      ]))));
              }));
        Jest.test("writeGetPropertyDecl", (function (param) {
                var wState = Writer$Ts2reason00.make(Os.EOL, "", 0);
                return Jest.Expect[/* toEqual */12]("let getPropName = (_inst: t): string => [%bs.raw {| _inst.propName |}];", Jest.Expect[/* expect */0](Writer$Ts2reason00.getCode(Writer$Ts2reason00.writeGetPropertyDecl(wState, makeFakeTsNode(/* array */[], "propName", /* PropertyDeclaration */154), /* array */[], /* [] */0)[0])));
              }));
        Jest.test("writeSetPropertyDecl", (function (param) {
                var wState = Writer$Ts2reason00.make(Os.EOL, "", 0);
                return Jest.Expect[/* toEqual */12]("let setPropName = (_inst: t, _value: string): unit => [%bs.raw {| _inst.propName = _value |}];", Jest.Expect[/* expect */0](Writer$Ts2reason00.getCode(Writer$Ts2reason00.writeSetPropertyDecl(wState, makeFakeTsNode(/* array */[], "propName", /* PropertyDeclaration */154), /* array */[], /* [] */0)[0])));
              }));
        Jest.test("writeMethodDecl", (function (param) {
                var wState = Writer$Ts2reason00.make(Os.EOL, "", 0);
                return Jest.Expect[/* toEqual */12]("let myFunc = (_inst: t, _arg01: string, _arg02: float, _arg03: bool): string => [%bs.raw {| _inst.myFunc(_arg01, _arg02, _arg03) |}];", Jest.Expect[/* expect */0](Writer$Ts2reason00.getCode(Writer$Ts2reason00.writeMethodDecl(wState, makeFakeTsNode(/* array */[], "myFunc", /* MethodDeclaration */156), /* array */[], /* [] */0)[0])));
              }));
        Jest.test("writeFunctionDecl", (function (param) {
                var wState = Writer$Ts2reason00.make(Os.EOL, "", 0);
                return Jest.Expect[/* toEqual */12]("[@bs.module \"myModule\"] external myFunc: (_arg01: string, _arg02: float, _arg03: bool) => string = \"myFunc\"", Jest.Expect[/* expect */0](Writer$Ts2reason00.getCode(Writer$Ts2reason00.writeFunctionDecl(wState, makeFakeTsNode(/* array */[], "myFunc", /* FunctionDeclaration */239), /* array */[], /* array */["myModule"], /* [] */0)[0])));
              }));
        return Jest.test("writeVariableDecl", (function (param) {
                      var wState = Writer$Ts2reason00.make(Os.EOL, "", 0);
                      return Jest.Expect[/* toEqual */12]("[@bs.module \"myModule\"] external myVar: string = \"myVar\"", Jest.Expect[/* expect */0](Writer$Ts2reason00.getCode(Writer$Ts2reason00.writeVariableDecl(wState, makeFakeTsNode(/* array */[], "myVar", /* VariableDeclaration */237), /* array */[], /* array */["myModule"], /* [] */0)[0])));
                    }));
      }));

exports.makeFakeTsNode = makeFakeTsNode;
exports.makeFakeTsType = makeFakeTsType;
exports.makeFakeTsParDec = makeFakeTsParDec;
/*  Not a pure module */
